version: '3.3'
services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/vhost:/etc/nginx/vhost.d
      - ./nginx/dhparam:/etc/nginx/dhparam
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - DHPARAM_GENERATION=false

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-proxy-letsencrypt
    depends_on:
      - "nginx-proxy"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/vhost:/etc/nginx/vhost.d
      - ./nginx/dhparam:/etc/nginx/dhparam
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
       - DEFAULT_EMAIL=cesarsanz91@gmail.com
       - NGINX_PROXY_CONTAINER=nginx-proxy
       

  api:
    container_name: api
    image: localhost:5009/api
    build: ./python-api
    restart: always
    expose:
      - "5000"
    volumes:
      - ./python-api/source:/app/source
      - ./python-api/logs:/app/logs
    env_file:
      - 'variables.env'
    secrets:
      - api_secrets
    depends_on:
      - mongodb
    environment:
      - MONGODB_HOST=mongodb
      - INFLUXDB_HOST=influxdb
      - "constraint:node==csanz1"
      - VIRTUAL_HOST=api.iotcloudtest.tk
      - VIRTUAL_PORT=5000
      - LETSENCRYPT_HOST=api.iotcloudtest.tk
      - VIRTUAL_NETWORK=iotcloud-overlay-net

  influx_mqtt_gateway:
    container_name: gateway
    image: localhost:5009/gateway
    build: ./python-gateway
    env_file:
      - 'variables.env'
    restart: always
    volumes:
      - ./python-gateway/source:/app/source
      - ./python-gateway/logs:/app/logs
    secrets:
      - gateway_secrets
    depends_on:
      - influxdb
    environment:
       - "constraint:node==csanz2"

  modules:
    container_name: modules
    image: localhost:5009/modules
    build: ./python-modules
    env_file:
      - 'variables.env'
    restart: always
    volumes:
      - ./python-modules/logs:/app/logs
    secrets:
      - modules_secrets
    deploy:
      placement:
        constraints: [node.hostname == csanz1]

  weather:
    container_name: weather
    image: localhost:5009/weather
    build: ./python-weather
    env_file:
      - 'variables.env'
    restart: always
    expose:
      - "5003"
    volumes:
      - ./python-weather/logs:/app/logs
    secrets:
      - weather_secrets

  monitoring:
    container_name: monitoring
    image: localhost:5009/monitoring
    build: ./python-monitoring
    restart: always
    volumes:
      - ./python-monitoring/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/hostname:/app/hostname:ro
    environment:
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_MONITORING_DB=monitoring

  mongodb:
    restart: always
    image: mongo
    hostname: docker
    volumes:
      - ./mongodb:/data/db
    expose:
      - "27017"
    command: mongod --logpath=/dev/null --setParameter diagnosticDataCollectionEnabled=false # --quiet
    environment:
       - "constraint:node==csanz1"

  influxdb:
    image: influxdb:1.8
    env_file:
      - 'variables.env'
    volumes:
      # Mount for influxdb data directory
      - ./influxdb/data:/var/lib/influxdb
      # Mount for influxdb configuration
      - ./influxdb/config/:/etc/influxdb/
    expose:
      - "8086"
    restart: always
    environment:
       - "constraint:node==csanz2"

  mosquitto:
    image: jllopis/mosquitto
    restart: always
    volumes:
      - ./mosquitto/data:/var/lib/mosquitto
      - ./mosquitto/log:/var/log/mosquitto
      - ./mosquitto/config:/etc/mosquitto
      - ./mosquitto/mosquitto.d:/etc/mosquitto.d
    ports:
      - "8883:8883"
      - "1883:1883"
    environment:
      - "constraint:node==csanz1"
      - ./nginx/certs:/etc/mosquitto/certs:ro

secrets:
  modules_secrets:
      file: ./python-modules/secrets
  weather_secrets:
    file: ./python-weather/secrets
  home_secrets:
      file: ./go-home/secrets
  grafana_datasource_secrets:
      file: ./go-grafana-datasource/secrets
  api_secrets:
      file: ./python-api/secrets
  gateway_secrets:
      file: ./python-gateway/secrets
  grafana_secrets_clientId:
      file: ./grafana/secrets/clientId
  grafana_secrets_clientSecret:
      file: ./grafana/secrets/clientSecret
  
